}
PCA(orange,quanti.sup = 9:15)$eig[2,3]
quantile(inertie,0.95)
chimie <- orange[,1:8]
PCA(chimie)
PCA(orange,quanti.sup = 9:15)
inertie <- NULL
nvar <- 8
nind <- 6
nsimul <- 1000
for (i in 1:nsimul){
data.test <- matrix(rnorm(nind*nvar), ncol=nvar)
res <- PCA(data.test,graph = FALSE)$eig[2,3]
inertie[i] <- res
}
print("Inertie sur les 2 premières dimensions")
PCA(orange,quanti.sup = 9:15)$eig[2,3]
print("Quantile aléatoire")
quantile(inertie,0.95)
chimie <- orange[,1:8]
PCA(chimie)
PCA(orange,quanti.sup = 9:15)
inertie <- NULL
nvar <- 8
nind <- 6
nsimul <- 1000
for (i in 1:nsimul){
data.test <- matrix(rnorm(nind*nvar), ncol=nvar)
res <- PCA(data.test,graph = FALSE)$eig[2,3]
inertie[i] <- res
}
print("Inertie sur les 2 premières dimensions")
PCA(orange,quanti.sup = 9:15)$eig[2,3]
print("Quantile aléatoire")
quantile(inertie,0.95)
senso <- orange[,9:15]
PCA(senso)
PCA(orange,quanti.sup = 1:8)
PCA(orange)
require(SensoMineR)
carto(orange[,1:8],orange[9:15])
n <- 5
for (i in 1:n){
facto <- facto*i
}
n <- 5
facto <- NULL
for (i in 1:n){
facto <- facto*i
}
facto
n <- 5
facto <- 1
for (i in 1:n){
facto <- facto*i
}
facto
n <- 5
facto <- 1
i <- 1
While (i<n){
facto <- facto*i
}
facto
n <- 5
facto <- 1
i <- 1
While (i<n) {
facto <- facto*i
}
facto
n <- 5
facto <- 1
i <- 1
While (i<n) {
facto <- facto*i
i <- i+1
}
facto
while(i<n){
facto <- facto*i
i <- i+1
}
facto
factorial(5)
n <- 5
facto <- 1
i <- 1
while(i<n){
facto <- facto*i
i <- i+1
}
facto
while(i<=n){
facto <- facto*i
i <- i+1
}
facto
while(i<=n){
facto <- facto*i
i <- i+1
}
facto
n <- 5
facto <- 1
i <- 1
repeat{
facto <- facto*i
i <- i+1
if (i>5){
break
}
}
facto
#Question 4
factFor <- function(n){
for (i in 1:n){
facto <- facto*i
}
}
factFor(5)
#Question 4
factFor <- function(n){
for (i in 1:n){
facto <- facto*i
}
facto
}
factFor(5)
#Question 4
factFor <- function(n){
facto <- 1
for (i in 1:n){
facto <- facto*i
}
facto
}
factFor(5)
factWhile <- function(n){
facto <- 1
while(i<=n){
facto <- facto*i
i <- i+1
}
facto
}
factRepeat <- function(n){
facto <- 1
repeat{
facto <- facto*i
i <- i+1
if (i>5){
break
}
}
facto
}
factRepeat(5)
factWhile(5)
i <- 1
factWhile <- function(n){
facto <- 1
i <- 1
while(i<=n){
facto <- facto*i
i <- i+1
}
facto
}
factRepeat <- function(n){
facto <- 1
i <- 1
repeat{
facto <- facto*i
i <- i+1
if (i>5){
break
}
}
facto
}
factRepeat(5)
factWhile(5)
#Question 5
factFor(5)
factWhile(5)
factRepeat(5)
#Question 6
compareFact <- function(n,type){
switch (type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact(n,'for')
compareFact(n,'while')
compareFact(n,'repeat')
#Question 4
factFor <- function(n){
facto <- 1
for (i in 1:n){
facto <- facto*i
}
return(facto)
}
factWhile <- function(n){
facto <- 1
i <- 1
while(i<=n){
facto <- facto*i
i <- i+1
}
return(facto)
}
factRepeat <- function(n){
facto <- 1
i <- 1
repeat{
facto <- facto*i
i <- i+1
if (i>5){
break
}
}
return(facto)
}
#Question 5
factFor(5)
factWhile(5)
factRepeat(5)
#compareFact(5,'repeat')
# compareFact(5,'repeat')
compareFact(5,'repeat')
setwd("~/")
setwd("~/")
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
# if (missing(n)){
#   stop("n is missing. Please enter a valid argument")
# }
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact(5,'repeat')
compareFact(5,'repet')
compareFact(5,'rep')
compareFact(5,'rep')
compareFact(5,'redep')
compareFact(5,'rep')
compareFact(5,'for')
compareFact(5,'while')
compareFact(5,'whi')
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
# if (missing(n)){
#   stop("n is missing. Please enter a valid argument")
# }
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact(5,'whi')
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
if (missing(n)){
stop("n is missing. Please enter a valid argument")
}
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact('whi')
compareFact(type='whi')
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
if (missing(n)){
stop("n is missing. Please enter a valid argument")
}
if(!class(n) %in% c("numeric", "integer")){
x <- as.numeric(as.character(x))
warning("x is coerced to numeric")
}
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact(type='whi')
compareFact('whi')
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
if (missing(n)){
stop("n is missing. Please enter a valid argument")
}
if(!class(n) %in% c("numeric", "integer")){
n <- as.numeric(as.character(n))
warning("n is coerced to numeric")
}
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact('whi')
compareFact(-1)
compareFact(-5)
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
if (missing(n)){
stop("n is missing. Please enter a valid argument")
}
if(!class(n) %in% c("numeric", "integer")){
n <- as.numeric(as.character(n))
warning("n is coerced to numeric")
}
if (n<0){
n <- abs(n)
warning("n should be positive. Conversion to absolute value.")
}
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact(-5)
compareFact(0)
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
if (missing(n)){
stop("n is missing. Please enter a valid argument")
}
if(!class(n) %in% c("numeric", "integer")){
n <- as.numeric(as.character(n))
warning("n is coerced to numeric")
}
if (n<0){
n <- abs(n)
warning("n should be positive. Conversion to absolute value.")
}
if (n==0){
return 1
}
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
#' "repeat"
#'
#' @return : Integer. Factorielle du nombre n.
#'
#' @importFrom base paste0
#'
#' @examples
#' compareFact(5,'repeat')
#' identify("Demeure", "Mélanie")#' compareFacto
#'
compareFact <- function(n,type="for") {
if (missing(n)){
stop("n is missing. Please enter a valid argument")
}
if(!class(n) %in% c("numeric", "integer")){
n <- as.numeric(as.character(n))
warning("n is coerced to numeric")
}
if (n<0){
n <- abs(n)
warning("n should be positive. Conversion to absolute value.")
}
if (n==0){
return (1)
}
control_type <- try(match.arg(type,c("for","while","repeat")),silent=TRUE)
if ("try-error"%in% class(control_type)){
control_type <- "for"
warning("Erreur dans le type. Retour à la valeur par défaut")
}
switch (control_type,
"for" = factFor(n),
"while"=factWhile(n),
"repeat"=factRepeat(n)
)
}
compareFact(0)
compareFact(5, type = "while")
compareFact(5, type = "repeat")
compareFact(5, type = "frf")
compareFact(0)
compareFact(-1)
compareFact("a")
compareFact(-1,5)
compareFact(-1.5)
compareFact(-5.1)
compareFact(5.41)
require(microbenchmark)
?microbenchmark
install.packages("microbenchmark")
require(microbenchmark)
?microbenchmark
microbenchmark(compareFact(100000,type = "for"),
compareFact(100000,type = "while"),
compareFact(100000,type = "repeat"),times=100)
